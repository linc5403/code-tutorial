* URL

  统一资源定位符, 顾名思义，用来表示一个资源的位置

  示例： https://www.baidu.com/

  | 定义                  | 内容                                     | 含义                                                            |
  |-----------------------+------------------------------------------+-----------------------------------------------------------------|
  | protocol              | https                                    | 使用https协议进行通信                                           |
  | host name/domain name | www.baidu.com                            | 主机域名或是ip地址，此处表示server所在的主机域名是www.baidu.com |
  | path                  | /                                        | 路径字段，代表访问server所表示的'/'资源                         |
  | port                  | 没有显示表示，因为是https协议，所以是443 | 表示该web Server所监听的端口号                                  |


  常用的协议缺省端口号：

  | 协议名称 | 作用               | 端口号  |
  |----------+--------------------+---------|
  | http     | 超文本传输协议     | tcp 80  |
  | https    | 超文本传输安全协议 | tcp 443 |
  | ssh      | 安全shell          | tcp 22  |
  | DNS      | 域名服务           | udp 53  |

** localhost是什么？

   打开你电脑的 ~/etc/hosts~ 文件，可以看到里面是ip地址和字符串的映射：

   #+begin_src sh
     ➜  code-tutorial git:(master) ✗ more /etc/hosts
     ##
     # Host Database
     #
     # localhost is used to configure the loopback interface
     # when the system is booting.  Do not change this entry.
     ##
     127.0.0.1       localhost
     255.255.255.255 broadcasthost
     ::1             localhost
     # Added by Docker Desktop
     # To allow the same kube context to work on the host and the container:
     127.0.0.1 kubernetes.docker.internal
     # End of section
   #+end_src

   而 ~localhost~ 字符串对应的ip地址是 ~127.0.0.1~ ， 在所有的电脑上，这个地址（ ~127.0.0.1~ ）表示本机，也就是这台电脑。
 
** 作业：
   列出下面url的各组成部分和代表的含义

   http://localhost:3001/

   http://localhost:3000/players

* client - server的交互

  
** 客户端发起请求

   客户端通过浏览器或其他的软件（app）向服务器发起请求， 该请求本质上就是某个URL。

   例如我们访问 ~https://www.baidu.com/~ 时，其实就是在获取这个URL的资源。

   客户端会解析该URL的各个组成部分，找到 ~protocal~ ， ~hostname~ ， ~port~ ， ~path~ （请参看第一部分）

   如果hostname不是ip地址，那么会在 ~/etc/hosts~ 文件中查找该字符串对应的ip地址， 如果找不到，那么使用本机的DNS Client向 DNS Server发起查询请求。

   获取到hostname对应的ip地址后，根据hostname和port就可以唯一的确定Server所在的主机和端口，也就是可以和server建立TCP链接了。

   建立了TCP连接后，再根据protocol将这个URL封装在请求部分，发送给Server

** 服务器进行应答

   我们的Web Server就是一个应用程序，它会监听某个TCP的端口号，当这个端口有数据进来的时候，操作系统会将数据转发给Server这个应用程序进行处理。

   Server拿到请求后，最重要的事情是获取到这个请求URL的PATH部分，因为PATH代表了client想要访问的资源。

   解析出PATH之后，就需要使用程序员编写的函数来返回应答给client
